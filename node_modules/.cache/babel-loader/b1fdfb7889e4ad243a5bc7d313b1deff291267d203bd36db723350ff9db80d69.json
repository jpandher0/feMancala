{"ast":null,"code":"var _jsxFileName = \"/Users/jasanpreet/Desktop/COSC625/COSC-625-Team-Global/mancala-frontend/src/Mancala.js\";\n// import React, { useState } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n// import \"./App.css\";\n\n// function MancalaBoard() {\n//   // Initialize the game state with 4 stones in each pit\n//   const initialPits = Array(12).fill(4);\n//   const [pits, setPits] = useState(initialPits);\n//   const [stores, setStores] = useState([0, 0]); // Stores for each player\n//   const [currentPlayer, setCurrentPlayer] = useState(0); // 0 for player 1, 1 for player 2\n//   const { search } = useLocation();\n//   const params = new URLSearchParams(search);\n//   const name = params.get(\"name\");\n\n//   const play = (pitIndex) => {\n//     let stones = pits[pitIndex];\n//     if (stones === 0 || currentPlayer !== Math.floor(pitIndex / 6)) return; // Check if pit is empty or not the player's turn\n\n//     // Clear the selected pit\n//     const newPits = [...pits];\n//     newPits[pitIndex] = 0;\n\n//     // Distribute the stones\n//     let currentIndex = pitIndex;\n//     while (stones > 0) {\n//       currentIndex = (currentIndex + 1) % 12;\n//       newPits[currentIndex]++;\n//       stones--;\n//     }\n\n//     // Check for capture\n//     if (\n//       newPits[currentIndex] === 1 &&\n//       Math.floor(currentIndex / 6) === currentPlayer\n//     ) {\n//       const oppositeIndex = 11 - currentIndex;\n//       const captured = newPits[oppositeIndex];\n//       newPits[oppositeIndex] = 0; // Clear the opposite pit\n//       const newStores = [...stores];\n//       newStores[currentPlayer] += captured + 1;\n//       newPits[currentIndex] = 0; // Clear the landing pit\n//       setStores(newStores);\n//     }\n\n//     setPits(newPits);\n//     setCurrentPlayer(1 - currentPlayer); // Switch turns\n//   };\n\n//   return (\n//     <div>\n//       <h1>Welcome to Our Mancala Game, {name}!</h1>\n//       <div className=\"board\">\n//         <div className=\"store\">{stores[1]}</div>\n//         <div className=\"pits\">\n//           {pits.slice(6).map((stones, index) => (\n//             <button key={index + 6} onClick={() => play(index + 6)}>\n//               {stones}\n//             </button>\n//           ))}\n//           {pits\n//             .slice(0, 6)\n//             .reverse()\n//             .map((stones, index) => (\n//               <button key={5 - index} onClick={() => play(5 - index)}>\n//                 {stones}\n//               </button>\n//             ))}\n//         </div>\n//         <div className=\"store\">{stores[0]}</div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default MancalaBoard;\n\n// import React, { useState } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n// import \"./App.css\";\n// import axios from \"axios\";\n\n// function MancalaBoard() {\n//   const [board, setBoard] = useState([]);\n//   const [freeMoveEarned, setFreeMoveEarned] = useState(false);\n\n//   const makeMove = async (playerNumber, moveIndex) => {\n//     try {\n//       const response = await axios.post(\"/make-move\", {\n//         player_number: playerNumber,\n//         move_index: moveIndex,\n//       });\n//       const { board, free_move_earned } = response.data;\n//       setBoard(board);\n//       setFreeMoveEarned(free_move_earned);\n//     } catch (error) {\n//       console.error(\"Error making move:\", error);\n//     }\n//   };\n\n//   // Render the game board and UI\n//   return (\n//     <div>\n//       <div>\n//         {/* Render the pits and stores */}\n//         {board.map((row, rowIndex) => (\n//           <div key={rowIndex}>\n//             {row.map((stones, pitIndex) => (\n//               <div key={pitIndex} onClick={() => makeMove(1, rowIndex)}>\n//                 {stones}\n//               </div>\n//             ))}\n//           </div>\n//         ))}\n//       </div>\n//       <div>\n//         {/* Render status messages, buttons, etc. */}\n//         <p>{freeMoveEarned ? \"You earned a free move!\" : \"Make your move\"}</p>\n//         <button onClick={() => makeMove(2, 0)}>Make Computer Move</button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default MancalaBoard;\n\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Mancala({\n  board\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mancala-board\",\n    children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((stones, pitIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pit\",\n        children: stones\n      }, pitIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n}\n_c = Mancala;\nexport default Mancala;\nvar _c;\n$RefreshReg$(_c, \"Mancala\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Mancala","board","className","children","map","row","rowIndex","stones","pitIndex","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jasanpreet/Desktop/COSC625/COSC-625-Team-Global/mancala-frontend/src/Mancala.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n// import \"./App.css\";\n\n// function MancalaBoard() {\n//   // Initialize the game state with 4 stones in each pit\n//   const initialPits = Array(12).fill(4);\n//   const [pits, setPits] = useState(initialPits);\n//   const [stores, setStores] = useState([0, 0]); // Stores for each player\n//   const [currentPlayer, setCurrentPlayer] = useState(0); // 0 for player 1, 1 for player 2\n//   const { search } = useLocation();\n//   const params = new URLSearchParams(search);\n//   const name = params.get(\"name\");\n\n//   const play = (pitIndex) => {\n//     let stones = pits[pitIndex];\n//     if (stones === 0 || currentPlayer !== Math.floor(pitIndex / 6)) return; // Check if pit is empty or not the player's turn\n\n//     // Clear the selected pit\n//     const newPits = [...pits];\n//     newPits[pitIndex] = 0;\n\n//     // Distribute the stones\n//     let currentIndex = pitIndex;\n//     while (stones > 0) {\n//       currentIndex = (currentIndex + 1) % 12;\n//       newPits[currentIndex]++;\n//       stones--;\n//     }\n\n//     // Check for capture\n//     if (\n//       newPits[currentIndex] === 1 &&\n//       Math.floor(currentIndex / 6) === currentPlayer\n//     ) {\n//       const oppositeIndex = 11 - currentIndex;\n//       const captured = newPits[oppositeIndex];\n//       newPits[oppositeIndex] = 0; // Clear the opposite pit\n//       const newStores = [...stores];\n//       newStores[currentPlayer] += captured + 1;\n//       newPits[currentIndex] = 0; // Clear the landing pit\n//       setStores(newStores);\n//     }\n\n//     setPits(newPits);\n//     setCurrentPlayer(1 - currentPlayer); // Switch turns\n//   };\n\n//   return (\n//     <div>\n//       <h1>Welcome to Our Mancala Game, {name}!</h1>\n//       <div className=\"board\">\n//         <div className=\"store\">{stores[1]}</div>\n//         <div className=\"pits\">\n//           {pits.slice(6).map((stones, index) => (\n//             <button key={index + 6} onClick={() => play(index + 6)}>\n//               {stones}\n//             </button>\n//           ))}\n//           {pits\n//             .slice(0, 6)\n//             .reverse()\n//             .map((stones, index) => (\n//               <button key={5 - index} onClick={() => play(5 - index)}>\n//                 {stones}\n//               </button>\n//             ))}\n//         </div>\n//         <div className=\"store\">{stores[0]}</div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default MancalaBoard;\n\n// import React, { useState } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n// import \"./App.css\";\n// import axios from \"axios\";\n\n// function MancalaBoard() {\n//   const [board, setBoard] = useState([]);\n//   const [freeMoveEarned, setFreeMoveEarned] = useState(false);\n\n//   const makeMove = async (playerNumber, moveIndex) => {\n//     try {\n//       const response = await axios.post(\"/make-move\", {\n//         player_number: playerNumber,\n//         move_index: moveIndex,\n//       });\n//       const { board, free_move_earned } = response.data;\n//       setBoard(board);\n//       setFreeMoveEarned(free_move_earned);\n//     } catch (error) {\n//       console.error(\"Error making move:\", error);\n//     }\n//   };\n\n//   // Render the game board and UI\n//   return (\n//     <div>\n//       <div>\n//         {/* Render the pits and stores */}\n//         {board.map((row, rowIndex) => (\n//           <div key={rowIndex}>\n//             {row.map((stones, pitIndex) => (\n//               <div key={pitIndex} onClick={() => makeMove(1, rowIndex)}>\n//                 {stones}\n//               </div>\n//             ))}\n//           </div>\n//         ))}\n//       </div>\n//       <div>\n//         {/* Render status messages, buttons, etc. */}\n//         <p>{freeMoveEarned ? \"You earned a free move!\" : \"Make your move\"}</p>\n//         <button onClick={() => makeMove(2, 0)}>Make Computer Move</button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default MancalaBoard;\n\nimport React from \"react\";\n\nfunction Mancala({ board }) {\n  return (\n    <div className=\"mancala-board\">\n      {board.map((row, rowIndex) => (\n        <div key={rowIndex} className=\"row\">\n          {row.map((stones, pitIndex) => (\n            <div key={pitIndex} className=\"pit\">\n              {stones}\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Mancala;\n"],"mappings":";AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,OAAOA,CAAC;EAAEC;AAAM,CAAC,EAAE;EAC1B,oBACEF,OAAA;IAAKG,SAAS,EAAC,eAAe;IAAAC,QAAA,EAC3BF,KAAK,CAACG,GAAG,CAAC,CAACC,GAAG,EAAEC,QAAQ,kBACvBP,OAAA;MAAoBG,SAAS,EAAC,KAAK;MAAAC,QAAA,EAChCE,GAAG,CAACD,GAAG,CAAC,CAACG,MAAM,EAAEC,QAAQ,kBACxBT,OAAA;QAAoBG,SAAS,EAAC,KAAK;QAAAC,QAAA,EAChCI;MAAM,GADCC,QAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEb,CACN;IAAC,GALMN,QAAQ;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMb,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACC,EAAA,GAdQb,OAAO;AAgBhB,eAAeA,OAAO;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}