{"ast":null,"code":"var _jsxFileName = \"/Users/jasanpreet/Desktop/COSC625/COSC-625-Team-Global/mancala-frontend/src/Mancala.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n// import \"./App.css\";\n\n// function MancalaBoard() {\n//   // Initialize the game state with 4 stones in each pit\n//   const initialPits = Array(12).fill(4);\n//   const [pits, setPits] = useState(initialPits);\n//   const [stores, setStores] = useState([0, 0]); // Stores for each player\n//   const [currentPlayer, setCurrentPlayer] = useState(0); // 0 for player 1, 1 for player 2\n//   const { search } = useLocation();\n//   const params = new URLSearchParams(search);\n//   const name = params.get(\"name\");\n\n//   const play = (pitIndex) => {\n//     let stones = pits[pitIndex];\n//     if (stones === 0 || currentPlayer !== Math.floor(pitIndex / 6)) return; // Check if pit is empty or not the player's turn\n\n//     // Clear the selected pit\n//     const newPits = [...pits];\n//     newPits[pitIndex] = 0;\n\n//     // Distribute the stones\n//     let currentIndex = pitIndex;\n//     while (stones > 0) {\n//       currentIndex = (currentIndex + 1) % 12;\n//       newPits[currentIndex]++;\n//       stones--;\n//     }\n\n//     // Check for capture\n//     if (\n//       newPits[currentIndex] === 1 &&\n//       Math.floor(currentIndex / 6) === currentPlayer\n//     ) {\n//       const oppositeIndex = 11 - currentIndex;\n//       const captured = newPits[oppositeIndex];\n//       newPits[oppositeIndex] = 0; // Clear the opposite pit\n//       const newStores = [...stores];\n//       newStores[currentPlayer] += captured + 1;\n//       newPits[currentIndex] = 0; // Clear the landing pit\n//       setStores(newStores);\n//     }\n\n//     setPits(newPits);\n//     setCurrentPlayer(1 - currentPlayer); // Switch turns\n//   };\n\n//   return (\n//     <div>\n//       <h1>Welcome to Our Mancala Game, {name}!</h1>\n//       <div className=\"board\">\n//         <div className=\"store\">{stores[1]}</div>\n//         <div className=\"pits\">\n//           {pits.slice(6).map((stones, index) => (\n//             <button key={index + 6} onClick={() => play(index + 6)}>\n//               {stones}\n//             </button>\n//           ))}\n//           {pits\n//             .slice(0, 6)\n//             .reverse()\n//             .map((stones, index) => (\n//               <button key={5 - index} onClick={() => play(5 - index)}>\n//                 {stones}\n//               </button>\n//             ))}\n//         </div>\n//         <div className=\"store\">{stores[0]}</div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default MancalaBoard;\nimport React, { useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MancalaBoard() {\n  _s();\n  const [board, setBoard] = useState([]);\n  const [freeMoveEarned, setFreeMoveEarned] = useState(false);\n  const makeMove = async (playerNumber, moveIndex) => {\n    try {\n      const response = await axios.post(\"/make-move\", {\n        player_number: playerNumber,\n        move_index: moveIndex\n      });\n      const {\n        board,\n        free_move_earned\n      } = response.data;\n      setBoard(board);\n      setFreeMoveEarned(free_move_earned);\n    } catch (error) {\n      console.error(\"Error making move:\", error);\n    }\n  };\n\n  // Render the game board and UI\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: row.map((stones, pitIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => makeMove(1, rowIndex),\n          children: stones\n        }, pitIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: freeMoveEarned ? \"You earned a free move!\" : \"Make your move\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => makeMove(2, 0),\n        children: \"Make Computer Move\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n_s(MancalaBoard, \"WiXbPWdkT0GakrIM0knKQgM6vGs=\");\n_c = MancalaBoard;\nexport default MancalaBoard;\nvar _c;\n$RefreshReg$(_c, \"MancalaBoard\");","map":{"version":3,"names":["React","useState","useLocation","axios","jsxDEV","_jsxDEV","MancalaBoard","_s","board","setBoard","freeMoveEarned","setFreeMoveEarned","makeMove","playerNumber","moveIndex","response","post","player_number","move_index","free_move_earned","data","error","console","children","map","row","rowIndex","stones","pitIndex","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jasanpreet/Desktop/COSC625/COSC-625-Team-Global/mancala-frontend/src/Mancala.js"],"sourcesContent":["// import React, { useState } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n// import \"./App.css\";\n\n// function MancalaBoard() {\n//   // Initialize the game state with 4 stones in each pit\n//   const initialPits = Array(12).fill(4);\n//   const [pits, setPits] = useState(initialPits);\n//   const [stores, setStores] = useState([0, 0]); // Stores for each player\n//   const [currentPlayer, setCurrentPlayer] = useState(0); // 0 for player 1, 1 for player 2\n//   const { search } = useLocation();\n//   const params = new URLSearchParams(search);\n//   const name = params.get(\"name\");\n\n//   const play = (pitIndex) => {\n//     let stones = pits[pitIndex];\n//     if (stones === 0 || currentPlayer !== Math.floor(pitIndex / 6)) return; // Check if pit is empty or not the player's turn\n\n//     // Clear the selected pit\n//     const newPits = [...pits];\n//     newPits[pitIndex] = 0;\n\n//     // Distribute the stones\n//     let currentIndex = pitIndex;\n//     while (stones > 0) {\n//       currentIndex = (currentIndex + 1) % 12;\n//       newPits[currentIndex]++;\n//       stones--;\n//     }\n\n//     // Check for capture\n//     if (\n//       newPits[currentIndex] === 1 &&\n//       Math.floor(currentIndex / 6) === currentPlayer\n//     ) {\n//       const oppositeIndex = 11 - currentIndex;\n//       const captured = newPits[oppositeIndex];\n//       newPits[oppositeIndex] = 0; // Clear the opposite pit\n//       const newStores = [...stores];\n//       newStores[currentPlayer] += captured + 1;\n//       newPits[currentIndex] = 0; // Clear the landing pit\n//       setStores(newStores);\n//     }\n\n//     setPits(newPits);\n//     setCurrentPlayer(1 - currentPlayer); // Switch turns\n//   };\n\n//   return (\n//     <div>\n//       <h1>Welcome to Our Mancala Game, {name}!</h1>\n//       <div className=\"board\">\n//         <div className=\"store\">{stores[1]}</div>\n//         <div className=\"pits\">\n//           {pits.slice(6).map((stones, index) => (\n//             <button key={index + 6} onClick={() => play(index + 6)}>\n//               {stones}\n//             </button>\n//           ))}\n//           {pits\n//             .slice(0, 6)\n//             .reverse()\n//             .map((stones, index) => (\n//               <button key={5 - index} onClick={() => play(5 - index)}>\n//                 {stones}\n//               </button>\n//             ))}\n//         </div>\n//         <div className=\"store\">{stores[0]}</div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default MancalaBoard;\nimport React, { useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport \"./App.css\";\nimport axios from \"axios\";\n\nfunction MancalaBoard() {\n  const [board, setBoard] = useState([]);\n  const [freeMoveEarned, setFreeMoveEarned] = useState(false);\n\n  const makeMove = async (playerNumber, moveIndex) => {\n    try {\n      const response = await axios.post(\"/make-move\", {\n        player_number: playerNumber,\n        move_index: moveIndex,\n      });\n      const { board, free_move_earned } = response.data;\n      setBoard(board);\n      setFreeMoveEarned(free_move_earned);\n    } catch (error) {\n      console.error(\"Error making move:\", error);\n    }\n  };\n\n  // Render the game board and UI\n  return (\n    <div>\n      <div>\n        {/* Render the pits and stores */}\n        {board.map((row, rowIndex) => (\n          <div key={rowIndex}>\n            {row.map((stones, pitIndex) => (\n              <div key={pitIndex} onClick={() => makeMove(1, rowIndex)}>\n                {stones}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n      <div>\n        {/* Render status messages, buttons, etc. */}\n        <p>{freeMoveEarned ? \"You earned a free move!\" : \"Make your move\"}</p>\n        <button onClick={() => makeMove(2, 0)}>Make Computer Move</button>\n      </div>\n    </div>\n  );\n}\n\nexport default MancalaBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}