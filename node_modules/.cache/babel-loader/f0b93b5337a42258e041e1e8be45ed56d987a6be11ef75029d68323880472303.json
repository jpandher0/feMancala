{"ast":null,"code":"var _jsxFileName = \"/Users/jasanpreet/Desktop/COSC625/COSC-625-Team-Global/mancala-frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MancalaBoard() {\n  _s();\n  // Initialize the game state with 4 stones in each pit\n  const initialPits = Array(12).fill(4);\n  const [pits, setPits] = useState(initialPits);\n  const [stores, setStores] = useState([0, 0]); // Stores for each player\n  const [currentPlayer, setCurrentPlayer] = useState(0); // 0 for player 1, 1 for player 2\n\n  const play = pitIndex => {\n    let stones = pits[pitIndex];\n    if (stones === 0 || currentPlayer !== Math.floor(pitIndex / 6)) return; // Check if pit is empty or not the player's turn\n\n    // Clear the selected pit\n    const newPits = [...pits];\n    newPits[pitIndex] = 0;\n\n    // Distribute the stones\n    let currentIndex = pitIndex;\n    while (stones > 0) {\n      currentIndex = (currentIndex + 1) % 12;\n      newPits[currentIndex]++;\n      stones--;\n    }\n\n    // Check for capture\n    if (newPits[currentIndex] === 1 && Math.floor(currentIndex / 6) === currentPlayer) {\n      const oppositeIndex = 11 - currentIndex;\n      const captured = newPits[oppositeIndex];\n      newPits[oppositeIndex] = 0; // Clear the opposite pit\n      const newStores = [...stores];\n      newStores[currentPlayer] += captured + 1;\n      newPits[currentIndex] = 0; // Clear the landing pit\n      setStores(newStores);\n    }\n    setPits(newPits);\n    setCurrentPlayer(1 - currentPlayer); // Switch turns\n  };\n\n  // Inside your MancalaBoard.js (or wherever your game logic resides)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"store store-right\",\n      children: stores[1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rows\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row top-row\",\n        children: pits.slice(6, 12).map((stones, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => play(index + 6),\n          children: stones\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 19\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row bottom-row\",\n        children: pits.slice(0, 6).reverse().map((stones, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => play(5 - index),\n          children: stones\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 19\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"store store-left\",\n      children: stores[0]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 3\n  }, this);\n}\n_s(MancalaBoard, \"Dp3i6RJk7ZkxULA5hhGrT6mCMb4=\");\n_c = MancalaBoard;\nexport default MancalaBoard;\nvar _c;\n$RefreshReg$(_c, \"MancalaBoard\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","MancalaBoard","_s","initialPits","Array","fill","pits","setPits","stores","setStores","currentPlayer","setCurrentPlayer","play","pitIndex","stones","Math","floor","newPits","currentIndex","oppositeIndex","captured","newStores","className","children","fileName","_jsxFileName","lineNumber","columnNumber","slice","map","index","onClick","reverse","_c","$RefreshReg$"],"sources":["/Users/jasanpreet/Desktop/COSC625/COSC-625-Team-Global/mancala-frontend/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction MancalaBoard() {\n    // Initialize the game state with 4 stones in each pit\n    const initialPits = Array(12).fill(4);\n    const [pits, setPits] = useState(initialPits);\n    const [stores, setStores] = useState([0, 0]); // Stores for each player\n    const [currentPlayer, setCurrentPlayer] = useState(0); // 0 for player 1, 1 for player 2\n\n    const play = (pitIndex) => {\n        let stones = pits[pitIndex];\n        if (stones === 0 || currentPlayer !== Math.floor(pitIndex / 6)) return; // Check if pit is empty or not the player's turn\n\n        // Clear the selected pit\n        const newPits = [...pits];\n        newPits[pitIndex] = 0;\n\n        // Distribute the stones\n        let currentIndex = pitIndex;\n        while (stones > 0) {\n            currentIndex = (currentIndex + 1) % 12;\n            newPits[currentIndex]++;\n            stones--;\n        }\n\n        // Check for capture\n        if (newPits[currentIndex] === 1 && Math.floor(currentIndex / 6) === currentPlayer) {\n            const oppositeIndex = 11 - currentIndex;\n            const captured = newPits[oppositeIndex];\n            newPits[oppositeIndex] = 0; // Clear the opposite pit\n            const newStores = [...stores];\n            newStores[currentPlayer] += captured + 1;\n            newPits[currentIndex] = 0; // Clear the landing pit\n            setStores(newStores);\n        }\n\n        setPits(newPits);\n        setCurrentPlayer(1 - currentPlayer); // Switch turns\n    };\n\n    // Inside your MancalaBoard.js (or wherever your game logic resides)\n\nreturn (\n  <div className=\"board\">\n      <div className=\"store store-right\">{stores[1]}</div>\n      <div className=\"rows\">\n          <div className=\"row top-row\">\n              {pits.slice(6, 12).map((stones, index) => (\n                  <button key={index} onClick={() => play(index + 6)}>{stones}</button>\n              ))}\n          </div>\n          <div className=\"row bottom-row\">\n              {pits.slice(0, 6).reverse().map((stones, index) => (\n                  <button key={index} onClick={() => play(5 - index)}>{stones}</button>\n              ))}\n          </div>\n      </div>\n      <div className=\"store store-left\">{stores[0]}</div>\n  </div>\n);\n\n}\n\nexport default MancalaBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}