{"ast":null,"code":"var _jsxFileName = \"/Users/jasanpreet/Desktop/COSC625/COSC-625-Team-Global/mancala-frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport WelcomePage from \"./WelcomePage\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/welcome\",\n          component: WelcomePage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          component: HomePage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nfunction HomePage() {\n  _s();\n  const [name, setName] = useState(\"\");\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (name.trim() !== \"\") {\n      window.location.href = `/welcome?name=${encodeURIComponent(name)}`;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to Our Mancala Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Enter your name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        name: \"name\",\n        value: name,\n        onChange: e => setName(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Enter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(HomePage, \"gFPpQ6rgfiGkmgRsh4q2nIO1W+Q=\");\n_c2 = HomePage;\nexport default App;\n\n// function MancalaBoard() {\n//     // Initialize the game state with 4 stones in each pit\n//     const initialPits = Array(12).fill(4);\n//     const [pits, setPits] = useState(initialPits);\n//     const [stores, setStores] = useState([0, 0]); // Stores for each player\n//     const [currentPlayer, setCurrentPlayer] = useState(0); // 0 for player 1, 1 for player 2\n\n//     const play = (pitIndex) => {\n//         let stones = pits[pitIndex];\n//         if (stones === 0 || currentPlayer !== Math.floor(pitIndex / 6)) return; // Check if pit is empty or not the player's turn\n\n//         // Clear the selected pit\n//         const newPits = [...pits];\n//         newPits[pitIndex] = 0;\n\n//         // Distribute the stones\n//         let currentIndex = pitIndex;\n//         while (stones > 0) {\n//             currentIndex = (currentIndex + 1) % 12;\n//             newPits[currentIndex]++;\n//             stones--;\n//         }\n\n//         // Check for capture\n//         if (newPits[currentIndex] === 1 && Math.floor(currentIndex / 6) === currentPlayer) {\n//             const oppositeIndex = 11 - currentIndex;\n//             const captured = newPits[oppositeIndex];\n//             newPits[oppositeIndex] = 0; // Clear the opposite pit\n//             const newStores = [...stores];\n//             newStores[currentPlayer] += captured + 1;\n//             newPits[currentIndex] = 0; // Clear the landing pit\n//             setStores(newStores);\n//         }\n\n//         setPits(newPits);\n//         setCurrentPlayer(1 - currentPlayer); // Switch turns\n//     };\n\n//     // Inside your MancalaBoard.js (or wherever your game logic resides)\n\n// return (\n//   <div className=\"board\">\n//       <div className=\"store store-right\">{stores[1]}</div>\n//       <div className=\"rows\">\n//           <div className=\"row top-row\">\n//               {pits.slice(6, 12).map((stones, index) => (\n//                   <button key={index} onClick={() => play(index + 6)}>{stones}</button>\n//               ))}\n//           </div>\n//           <div className=\"row bottom-row\">\n//               {pits.slice(0, 6).reverse().map((stones, index) => (\n//                   <button key={index} onClick={() => play(5 - index)}>{stones}</button>\n//               ))}\n//           </div>\n//       </div>\n//       <div className=\"store store-left\">{stores[0]}</div>\n//   </div>\n// );\n\n// }\n\n// export default MancalaBoard;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"HomePage\");","map":{"version":3,"names":["React","useState","BrowserRouter","Router","Route","Routes","WelcomePage","jsxDEV","_jsxDEV","App","children","className","path","component","fileName","_jsxFileName","lineNumber","columnNumber","exact","HomePage","_c","_s","name","setName","handleSubmit","e","preventDefault","trim","window","location","href","encodeURIComponent","onSubmit","htmlFor","type","id","value","onChange","target","required","_c2","$RefreshReg$"],"sources":["/Users/jasanpreet/Desktop/COSC625/COSC-625-Team-Global/mancala-frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport WelcomePage from \"./WelcomePage\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Routes>\n          <Route path=\"/welcome\" component={WelcomePage} />\n          <Route exact path=\"/\" component={HomePage} />\n        </Routes>\n      </div>\n    </Router>\n  );\n}\n\nfunction HomePage() {\n  const [name, setName] = useState(\"\");\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (name.trim() !== \"\") {\n      window.location.href = `/welcome?name=${encodeURIComponent(name)}`;\n    }\n  };\n\n  return (\n    <div>\n      <h1>Welcome to Our Mancala Game</h1>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"name\">Enter your name:</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          name=\"name\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n          required\n        />\n        <button type=\"submit\">Enter</button>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n\n// function MancalaBoard() {\n//     // Initialize the game state with 4 stones in each pit\n//     const initialPits = Array(12).fill(4);\n//     const [pits, setPits] = useState(initialPits);\n//     const [stores, setStores] = useState([0, 0]); // Stores for each player\n//     const [currentPlayer, setCurrentPlayer] = useState(0); // 0 for player 1, 1 for player 2\n\n//     const play = (pitIndex) => {\n//         let stones = pits[pitIndex];\n//         if (stones === 0 || currentPlayer !== Math.floor(pitIndex / 6)) return; // Check if pit is empty or not the player's turn\n\n//         // Clear the selected pit\n//         const newPits = [...pits];\n//         newPits[pitIndex] = 0;\n\n//         // Distribute the stones\n//         let currentIndex = pitIndex;\n//         while (stones > 0) {\n//             currentIndex = (currentIndex + 1) % 12;\n//             newPits[currentIndex]++;\n//             stones--;\n//         }\n\n//         // Check for capture\n//         if (newPits[currentIndex] === 1 && Math.floor(currentIndex / 6) === currentPlayer) {\n//             const oppositeIndex = 11 - currentIndex;\n//             const captured = newPits[oppositeIndex];\n//             newPits[oppositeIndex] = 0; // Clear the opposite pit\n//             const newStores = [...stores];\n//             newStores[currentPlayer] += captured + 1;\n//             newPits[currentIndex] = 0; // Clear the landing pit\n//             setStores(newStores);\n//         }\n\n//         setPits(newPits);\n//         setCurrentPlayer(1 - currentPlayer); // Switch turns\n//     };\n\n//     // Inside your MancalaBoard.js (or wherever your game logic resides)\n\n// return (\n//   <div className=\"board\">\n//       <div className=\"store store-right\">{stores[1]}</div>\n//       <div className=\"rows\">\n//           <div className=\"row top-row\">\n//               {pits.slice(6, 12).map((stones, index) => (\n//                   <button key={index} onClick={() => play(index + 6)}>{stones}</button>\n//               ))}\n//           </div>\n//           <div className=\"row bottom-row\">\n//               {pits.slice(0, 6).reverse().map((stones, index) => (\n//                   <button key={index} onClick={() => play(5 - index)}>{stones}</button>\n//               ))}\n//           </div>\n//       </div>\n//       <div className=\"store store-left\">{stores[0]}</div>\n//   </div>\n// );\n\n// }\n\n// export default MancalaBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}