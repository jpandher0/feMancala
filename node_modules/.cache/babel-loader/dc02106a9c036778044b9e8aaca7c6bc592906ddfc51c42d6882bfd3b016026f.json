{"ast":null,"code":"import React, { useState } from \"react\";\nimport \"./App.css\";\n\n// function MancalaBoard() {\n//     // Initialize the game state with 4 stones in each pit\n//     const initialPits = Array(12).fill(4);\n//     const [pits, setPits] = useState(initialPits);\n//     const [stores, setStores] = useState([0, 0]); // Stores for each player\n//     const [currentPlayer, setCurrentPlayer] = useState(0); // 0 for player 1, 1 for player 2\n\n//     const play = (pitIndex) => {\n//         let stones = pits[pitIndex];\n//         if (stones === 0 || currentPlayer !== Math.floor(pitIndex / 6)) return; // Check if pit is empty or not the player's turn\n\n//         // Clear the selected pit\n//         const newPits = [...pits];\n//         newPits[pitIndex] = 0;\n\n//         // Distribute the stones\n//         let currentIndex = pitIndex;\n//         while (stones > 0) {\n//             currentIndex = (currentIndex + 1) % 12;\n//             newPits[currentIndex]++;\n//             stones--;\n//         }\n\n//         // Check for capture\n//         if (newPits[currentIndex] === 1 && Math.floor(currentIndex / 6) === currentPlayer) {\n//             const oppositeIndex = 11 - currentIndex;\n//             const captured = newPits[oppositeIndex];\n//             newPits[oppositeIndex] = 0; // Clear the opposite pit\n//             const newStores = [...stores];\n//             newStores[currentPlayer] += captured + 1;\n//             newPits[currentIndex] = 0; // Clear the landing pit\n//             setStores(newStores);\n//         }\n\n//         setPits(newPits);\n//         setCurrentPlayer(1 - currentPlayer); // Switch turns\n//     };\n\n//     // Inside your MancalaBoard.js (or wherever your game logic resides)\n\n// return (\n//   <div className=\"board\">\n//       <div className=\"store store-right\">{stores[1]}</div>\n//       <div className=\"rows\">\n//           <div className=\"row top-row\">\n//               {pits.slice(6, 12).map((stones, index) => (\n//                   <button key={index} onClick={() => play(index + 6)}>{stones}</button>\n//               ))}\n//           </div>\n//           <div className=\"row bottom-row\">\n//               {pits.slice(0, 6).reverse().map((stones, index) => (\n//                   <button key={index} onClick={() => play(5 - index)}>{stones}</button>\n//               ))}\n//           </div>\n//       </div>\n//       <div className=\"store store-left\">{stores[0]}</div>\n//   </div>\n// );\n\n// }\n\n// export default MancalaBoard;\n\nconst express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\nconst app = express();\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\napp.post(\"/submit-your-name\", (req, res) => {\n  const name = req.body.name;\n  res.redirect(`/welcome?name=${name}`);\n});\napp.get(\"/welcome\", (req, res) => {\n  const name = req.query.name;\n  res.send(`<h1>Welcome to Our Mancala Game, ${name}!</h1>`);\n});\napp.listen(3000, () => {\n  console.log(\"Server is running on port 3000\");\n});","map":{"version":3,"names":["React","useState","express","require","bodyParser","app","use","urlencoded","extended","post","req","res","name","body","redirect","get","query","send","listen","console","log"],"sources":["/Users/jasanpreet/Desktop/COSC625/COSC-625-Team-Global/mancala-frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\n// function MancalaBoard() {\n//     // Initialize the game state with 4 stones in each pit\n//     const initialPits = Array(12).fill(4);\n//     const [pits, setPits] = useState(initialPits);\n//     const [stores, setStores] = useState([0, 0]); // Stores for each player\n//     const [currentPlayer, setCurrentPlayer] = useState(0); // 0 for player 1, 1 for player 2\n\n//     const play = (pitIndex) => {\n//         let stones = pits[pitIndex];\n//         if (stones === 0 || currentPlayer !== Math.floor(pitIndex / 6)) return; // Check if pit is empty or not the player's turn\n\n//         // Clear the selected pit\n//         const newPits = [...pits];\n//         newPits[pitIndex] = 0;\n\n//         // Distribute the stones\n//         let currentIndex = pitIndex;\n//         while (stones > 0) {\n//             currentIndex = (currentIndex + 1) % 12;\n//             newPits[currentIndex]++;\n//             stones--;\n//         }\n\n//         // Check for capture\n//         if (newPits[currentIndex] === 1 && Math.floor(currentIndex / 6) === currentPlayer) {\n//             const oppositeIndex = 11 - currentIndex;\n//             const captured = newPits[oppositeIndex];\n//             newPits[oppositeIndex] = 0; // Clear the opposite pit\n//             const newStores = [...stores];\n//             newStores[currentPlayer] += captured + 1;\n//             newPits[currentIndex] = 0; // Clear the landing pit\n//             setStores(newStores);\n//         }\n\n//         setPits(newPits);\n//         setCurrentPlayer(1 - currentPlayer); // Switch turns\n//     };\n\n//     // Inside your MancalaBoard.js (or wherever your game logic resides)\n\n// return (\n//   <div className=\"board\">\n//       <div className=\"store store-right\">{stores[1]}</div>\n//       <div className=\"rows\">\n//           <div className=\"row top-row\">\n//               {pits.slice(6, 12).map((stones, index) => (\n//                   <button key={index} onClick={() => play(index + 6)}>{stones}</button>\n//               ))}\n//           </div>\n//           <div className=\"row bottom-row\">\n//               {pits.slice(0, 6).reverse().map((stones, index) => (\n//                   <button key={index} onClick={() => play(5 - index)}>{stones}</button>\n//               ))}\n//           </div>\n//       </div>\n//       <div className=\"store store-left\">{stores[0]}</div>\n//   </div>\n// );\n\n// }\n\n// export default MancalaBoard;\n\nconst express = require(\"express\");\nconst bodyParser = require(\"body-parser\");\n\nconst app = express();\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.post(\"/submit-your-name\", (req, res) => {\n  const name = req.body.name;\n  res.redirect(`/welcome?name=${name}`);\n});\n\napp.get(\"/welcome\", (req, res) => {\n  const name = req.query.name;\n  res.send(`<h1>Welcome to Our Mancala Game, ${name}!</h1>`);\n});\n\napp.listen(3000, () => {\n  console.log(\"Server is running on port 3000\");\n});\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;;AAElB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAa,CAAC;AAEzC,MAAME,GAAG,GAAGH,OAAO,CAAC,CAAC;AAErBG,GAAG,CAACC,GAAG,CAACF,UAAU,CAACG,UAAU,CAAC;EAAEC,QAAQ,EAAE;AAAK,CAAC,CAAC,CAAC;AAElDH,GAAG,CAACI,IAAI,CAAC,mBAAmB,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAC1C,MAAMC,IAAI,GAAGF,GAAG,CAACG,IAAI,CAACD,IAAI;EAC1BD,GAAG,CAACG,QAAQ,CAAE,iBAAgBF,IAAK,EAAC,CAAC;AACvC,CAAC,CAAC;AAEFP,GAAG,CAACU,GAAG,CAAC,UAAU,EAAE,CAACL,GAAG,EAAEC,GAAG,KAAK;EAChC,MAAMC,IAAI,GAAGF,GAAG,CAACM,KAAK,CAACJ,IAAI;EAC3BD,GAAG,CAACM,IAAI,CAAE,oCAAmCL,IAAK,QAAO,CAAC;AAC5D,CAAC,CAAC;AAEFP,GAAG,CAACa,MAAM,CAAC,IAAI,EAAE,MAAM;EACrBC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;AAC/C,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}