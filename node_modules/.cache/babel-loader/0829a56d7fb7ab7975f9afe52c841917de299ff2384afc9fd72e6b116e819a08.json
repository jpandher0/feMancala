{"ast":null,"code":"var _jsxFileName = \"/Users/jasanpreet/Desktop/COSC625/COSC-625-Team-Global/mancala-frontend/src/Mancala.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MancalaBoard() {\n  _s();\n  // Initialize the game state with 4 stones in each pit\n  const initialPits = Array(14).fill(4);\n  initialPits[6] = 0; // Set player 1's store to 0\n  initialPits[13] = 0; // Set player 2's store to 0\n  const [pits, setPits] = useState(initialPits);\n  const [currentPlayer, setCurrentPlayer] = useState(0); // 0 for player 1, 1 for player 2\n  const {\n    search\n  } = useLocation();\n  const params = new URLSearchParams(search);\n  const name = params.get(\"name\");\n  const play = pitIndex => {\n    let stones = pits[pitIndex];\n    if (stones === 0 || currentPlayer !== Math.floor(pitIndex / 7)) return; // Check if pit is empty or not the player's turn\n\n    // Clear the selected pit\n    const newPits = [...pits];\n    newPits[pitIndex] = 0;\n\n    // Distribute the stones\n    let currentIndex = pitIndex;\n    while (stones > 0) {\n      currentIndex = (currentIndex + 1) % 14;\n      // Skip the opponent's store\n      if (currentPlayer === 0 && currentIndex === 13) currentIndex = 0;\n      if (currentPlayer === 1 && currentIndex === 6) currentIndex++;\n      newPits[currentIndex]++;\n      stones--;\n    }\n\n    // Check for capture\n    if ((currentIndex === 6 || currentIndex === 13) &&\n    // Last stone landed in a store\n    newPits[currentIndex] === 1 &&\n    // Store had no stones before\n    newPits[12 - currentIndex] > 0 // Opposite pit is not empty\n    ) {\n      const captured = newPits[12 - currentIndex];\n      newPits[12 - currentIndex] = 0; // Clear the opposite pit\n      newPits[currentIndex] = 0; // Clear the landing store\n      const storeIndex = currentPlayer === 0 ? 6 : 13;\n      newPits[storeIndex] += captured + 1;\n    }\n    setPits(newPits);\n    setCurrentPlayer(currentPlayer === 0 ? 1 : 0); // Switch turns\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Welcome to Our Mancala Game, \", name, \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pits\",\n        children: [pits.slice(0, 6).map((stones, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => play(index),\n          children: stones\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"store\",\n          children: pits[6]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), pits.slice(7, 13).map((stones, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => play(index + 7),\n          children: stones\n        }, index + 7, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"store\",\n        children: pits[13]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(MancalaBoard, \"+SB8yjEkgoKWbM1zd8xgfYlra7k=\", false, function () {\n  return [useLocation];\n});\n_c = MancalaBoard;\nexport default MancalaBoard;\n\n// import React, { useState } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n// import \"./App.css\";\n// import axios from \"axios\";\n\n// function MancalaBoard() {\n//   const [board, setBoard] = useState([]);\n//   const [freeMoveEarned, setFreeMoveEarned] = useState(false);\n\n//   const makeMove = async (playerNumber, moveIndex) => {\n//     try {\n//       const response = await axios.post(\"/make-move\", {\n//         player_number: playerNumber,\n//         move_index: moveIndex,\n//       });\n//       const { board, free_move_earned } = response.data;\n//       setBoard(board);\n//       setFreeMoveEarned(free_move_earned);\n//     } catch (error) {\n//       console.error(\"Error making move:\", error);\n//     }\n//   };\n\n//   // Render the game board and UI\n//   return (\n//     <div>\n//       <div>\n//         {/* Render the pits and stores */}\n//         {board.map((row, rowIndex) => (\n//           <div key={rowIndex}>\n//             {row.map((stones, pitIndex) => (\n//               <div key={pitIndex} onClick={() => makeMove(1, rowIndex)}>\n//                 {stones}\n//               </div>\n//             ))}\n//           </div>\n//         ))}\n//       </div>\n//       <div>\n//         {/* Render status messages, buttons, etc. */}\n//         <p>{freeMoveEarned ? \"You earned a free move!\" : \"Make your move\"}</p>\n//         <button onClick={() => makeMove(2, 0)}>Make Computer Move</button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default MancalaBoard;\n\n// import React from \"react\";\n\n// function Mancala({ board }) {\n//   if (!board) {\n//     // Render loading indicator if board data is not available yet\n//     return <div>Loading...</div>;\n//   }\n\n//   return (\n//     <div className=\"mancala-board\">\n//       {board.map((row, rowIndex) => (\n//         <div key={rowIndex} className=\"row\">\n//           {row.map((stones, pitIndex) => (\n//             <div key={pitIndex} className=\"pit\">\n//               {stones}\n//             </div>\n//           ))}\n//         </div>\n//       ))}\n//     </div>\n//   );\n// }\n\n// export default Mancala;\nvar _c;\n$RefreshReg$(_c, \"MancalaBoard\");","map":{"version":3,"names":["React","useState","useLocation","jsxDEV","_jsxDEV","MancalaBoard","_s","initialPits","Array","fill","pits","setPits","currentPlayer","setCurrentPlayer","search","params","URLSearchParams","name","get","play","pitIndex","stones","Math","floor","newPits","currentIndex","captured","storeIndex","children","fileName","_jsxFileName","lineNumber","columnNumber","className","slice","map","index","onClick","_c","$RefreshReg$"],"sources":["/Users/jasanpreet/Desktop/COSC625/COSC-625-Team-Global/mancala-frontend/src/Mancala.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport \"./App.css\";\n\nfunction MancalaBoard() {\n  // Initialize the game state with 4 stones in each pit\n  const initialPits = Array(14).fill(4);\n  initialPits[6] = 0; // Set player 1's store to 0\n  initialPits[13] = 0; // Set player 2's store to 0\n  const [pits, setPits] = useState(initialPits);\n  const [currentPlayer, setCurrentPlayer] = useState(0); // 0 for player 1, 1 for player 2\n  const { search } = useLocation();\n  const params = new URLSearchParams(search);\n  const name = params.get(\"name\");\n\n  const play = (pitIndex) => {\n    let stones = pits[pitIndex];\n    if (stones === 0 || currentPlayer !== Math.floor(pitIndex / 7)) return; // Check if pit is empty or not the player's turn\n\n    // Clear the selected pit\n    const newPits = [...pits];\n    newPits[pitIndex] = 0;\n\n    // Distribute the stones\n    let currentIndex = pitIndex;\n    while (stones > 0) {\n      currentIndex = (currentIndex + 1) % 14;\n      // Skip the opponent's store\n      if (currentPlayer === 0 && currentIndex === 13) currentIndex = 0;\n      if (currentPlayer === 1 && currentIndex === 6) currentIndex++;\n      newPits[currentIndex]++;\n      stones--;\n    }\n\n    // Check for capture\n    if (\n      (currentIndex === 6 || currentIndex === 13) && // Last stone landed in a store\n      newPits[currentIndex] === 1 && // Store had no stones before\n      newPits[12 - currentIndex] > 0 // Opposite pit is not empty\n    ) {\n      const captured = newPits[12 - currentIndex];\n      newPits[12 - currentIndex] = 0; // Clear the opposite pit\n      newPits[currentIndex] = 0; // Clear the landing store\n      const storeIndex = currentPlayer === 0 ? 6 : 13;\n      newPits[storeIndex] += captured + 1;\n    }\n\n    setPits(newPits);\n    setCurrentPlayer(currentPlayer === 0 ? 1 : 0); // Switch turns\n  };\n\n  return (\n    <div>\n      <h1>Welcome to Our Mancala Game, {name}!</h1>\n      <div className=\"board\">\n        <div className=\"pits\">\n          {pits.slice(0, 6).map((stones, index) => (\n            <button key={index} onClick={() => play(index)}>\n              {stones}\n            </button>\n          ))}\n          <div className=\"store\">{pits[6]}</div>\n          {pits.slice(7, 13).map((stones, index) => (\n            <button key={index + 7} onClick={() => play(index + 7)}>\n              {stones}\n            </button>\n          ))}\n        </div>\n        <div className=\"store\">{pits[13]}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default MancalaBoard;\n\n// import React, { useState } from \"react\";\n// import { useLocation } from \"react-router-dom\";\n// import \"./App.css\";\n// import axios from \"axios\";\n\n// function MancalaBoard() {\n//   const [board, setBoard] = useState([]);\n//   const [freeMoveEarned, setFreeMoveEarned] = useState(false);\n\n//   const makeMove = async (playerNumber, moveIndex) => {\n//     try {\n//       const response = await axios.post(\"/make-move\", {\n//         player_number: playerNumber,\n//         move_index: moveIndex,\n//       });\n//       const { board, free_move_earned } = response.data;\n//       setBoard(board);\n//       setFreeMoveEarned(free_move_earned);\n//     } catch (error) {\n//       console.error(\"Error making move:\", error);\n//     }\n//   };\n\n//   // Render the game board and UI\n//   return (\n//     <div>\n//       <div>\n//         {/* Render the pits and stores */}\n//         {board.map((row, rowIndex) => (\n//           <div key={rowIndex}>\n//             {row.map((stones, pitIndex) => (\n//               <div key={pitIndex} onClick={() => makeMove(1, rowIndex)}>\n//                 {stones}\n//               </div>\n//             ))}\n//           </div>\n//         ))}\n//       </div>\n//       <div>\n//         {/* Render status messages, buttons, etc. */}\n//         <p>{freeMoveEarned ? \"You earned a free move!\" : \"Make your move\"}</p>\n//         <button onClick={() => makeMove(2, 0)}>Make Computer Move</button>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default MancalaBoard;\n\n// import React from \"react\";\n\n// function Mancala({ board }) {\n//   if (!board) {\n//     // Render loading indicator if board data is not available yet\n//     return <div>Loading...</div>;\n//   }\n\n//   return (\n//     <div className=\"mancala-board\">\n//       {board.map((row, rowIndex) => (\n//         <div key={rowIndex} className=\"row\">\n//           {row.map((stones, pitIndex) => (\n//             <div key={pitIndex} className=\"pit\">\n//               {stones}\n//             </div>\n//           ))}\n//         </div>\n//       ))}\n//     </div>\n//   );\n// }\n\n// export default Mancala;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}